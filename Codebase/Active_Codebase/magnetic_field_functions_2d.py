"""
This document highlights 2d versions of magnetic field functions. Thus, these
functions take in 2 parameters, the x,y values or rho,phi values, and return 
the u,v vector components of the given magnetic field

"""

import numpy as np
import scipy as sp
import scipy.special as sp_spcl

import Robustness as Robust
import Backend


# In order from least complex field to most complex field, first in cartesian
# cords.

########################################################################
#####             2D Magnetic Field Cartesian Functions            #####
########################################################################

def circular_magnetic_field_cart_2d(x, y,
                                    center=[0,0],
                                    mag_function=lambda r: 1/r**2):
    """Compute the cartesian magnetic field vectors of a circular field.

    The circular magnetic field is radially symmetric. This function returns 
    the values of the components of a magnetic field given some point(s) x,y. 
    The center of the circular magnetic field can be redefined.

    Parameters:
    -----------
    x : array_like
        The x values of the points for magnetic field computation.
    y : array_like
        The y values of the points for magnetic field computation.
    center : array_like, optional
        The center of the circular magnetic field function, passed as an
        array ``[x0,y0]``. Defaults to ``[0,0]``
    mag_function : function ``f(r)``, optional
        The value of the magnitude of the vector field at some radius from
        the center. Default is ``f(r) = 1/r**2``.

    Returns:
    --------
    Bfield_x : ndarray
        The x component of the magnetic field at the given points. Order
        is perserved.
    Bfield_y : ndarray
        The y component of the magnetic field at the given points. Order
        is perserved.
    """

    # Type check.
    x = Robust.valid.validate_float_array(x)
    y = Robust.valid.validate_float_array(y)
    center = Robust.valid.validate_float_array(center,shape=(2,))
    mag_function = Robust.valid.validate_function_call(mag_function,
                                                       n_parameters=2)

    # Do a transformation based on the relocation of the center.
    x = x - center[0]
    y = y - center[1]

    # Convert to a polar system for tangential vector.
    rho_subaxis = np.hypot(x, y)
    phi_subaxis = np.arctan2(y, x)

    # Calculate the magnitude of the tangential vector.
    B_tangent = mag_function(rho_subaxis)

    # The vector is tangent to a circle made by r, thus the angle is related to
    # phi, but is not phi.
    B_angle = phi_subaxis + np.pi/2

    # Calculate the components of the magnetic field vector based on the
    # magnitude and the angle.
    Bfield_x = B_tangent * np.cos(B_angle)
    Bfield_y = B_tangent * np.sin(B_angle)

    return Bfield_x, Bfield_y


def hourglass_magnetic_field_cart_2d(r, z,
                                     h, k_array, disk_radius, uniform_B0,
                                     center=[0,0]):
    """Equation for hourglass magnetic fields given by Ewertowshi & Basu 2013.

    This function is the two dimensional version of the equations given by 
    Ewertowshi & Basu 2013. This projects the values of the three dimensional
    form to the r-z plane in cylindrical coordinates. In practice, r,z can be 
    mapped to x,y. The center can also be changed.

    Parameters:
    -----------
    r : array_like
        The input values of the radial direction for the equation.
    z : array_like
        The input values of the polar direction for the equation.
    h : float
        A free parameter as dictated by the paper.
    k_array : array_like
        The list of k coefficient values for the summation in Eq 45.
    disk_radius : float
        The radius of the protoplanetary disk. Relevent for the hourglass
        magnetic field generated by this paper.
    uniform_B0 : float
        The magnitude of the background magnetic field.
    center : array_like, optional
        The center of the hourglass shaped magnetic field function, passed
        as an array ``[r0,z0]``. Defaults to ``[0,0]``

    Returns:
    --------
    Bfield_r : ndarray
        The value of the magnetic field in the r-axial direction.
    Bfield_z : ndarray
        The value of the magnetic field in the z-axial direction.
    """

    # Type check the parameters.
    r = Robust.valid.validate_float_array(r)
    z = Robust.valid.validate_float_array(z)
    center = Robust.valid.validate_float_array(center, shape=(2,))
    h = Robust.valid.validate_float_value(h)
    k_array = Robust.valid.validate_float_array(k_array)
    disk_radius = Robust.valid.validate_float_value(disk_radius,
                                                    greater_than=0)
    uniform_B0 = Robust.valid.validate_float_value(uniform_B0)

    # Do a translation based on the center.
    r = r - center[0]
    z = z - center[1]

    # Compute the magnetic fields from Ewertowski and Basu 2013 equations.
    Bfield_r = Backend.EwBa13.Ewer_Basu__B_r(
        r, z, h, k_array, disk_radius)
    Bfield_z = Backend.EwBa13.Ewer_Basu__B_z(
        r, z, h, k_array, disk_radius, uniform_B0)

    return Bfield_r, Bfield_z
